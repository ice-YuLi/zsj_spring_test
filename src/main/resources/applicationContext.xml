<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 事务注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--
        1、Spring容器是一个父容器，SpringMVC容器是一个子容器，它继承自Spring容器。因此，在SpringMVC容器中，可以访问到Spring容器中定义的Bean，而在Spring容器中，无法访问SpringMVC容器中定义的Bean。在Web开发中，Controller全部在SpringMVC中扫描，除了Controller之外的Bean，全部在Spring容器中扫描（Service、Dao），按这种方式扫描，扫描完完成后，Controller可以访问到Service。
            Ⅰ、为什么不全部都在Spring中扫描
                因为处理器映射器只会去SpringMVC中查找到Controller，如果没有，就找不到，不会去Spring中找，这就决定了，Controller必须在SpringMVC中扫描。
            Ⅱ、为什么不全部在SpringMVC中扫描
                在SSM整合或者Spring+SpringMVC+JdbcTemplate中，可以全部在SpringMVC中扫描，但是，在SSH整合中，这种方式不允许。
        2、最佳实践：
        Controller在SpringMVC中扫描，视图解析器等在SpringMVC容器中配置
        Spring中扫描Service、Dao已经其他组件，事务定义、数据源定义都在Spring容器中配置
     -->
    <!-- 开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理-->
    <context:component-scan base-package="com.zsj" >
        <!-- 配置哪些注解不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 读取properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- Spring整合MyBatis框架-->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - mysql  开始 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- 1、MySQL配置连接池-->
     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${mysql.jdbc.driver}"/>
        <property name="jdbcUrl" value="${mysql.jdbc.url}"/>
        <property name="user" value="${mysql.jdbc.username}"/>
        <property name="password" value="${mysql.jdbc.password}"/>
    </bean>
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - mysql  结束 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - oracle 开始 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- 2、Oracle配置数据源 -->
    <!--<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${oracle.jdbc.driver}"></property>
        <property name="url" value="${oracle.jdbc.url}"></property>
        <property name="username" value="${oracle.jdbc.username}"></property>
        <property name="password" value="${oracle.jdbc.password}"></property>
        &lt;!&ndash; 连接池启动时的初始值 &ndash;&gt;
        <property name="initialSize" value="3" />
        &lt;!&ndash; 连接池的最大值 &ndash;&gt;
        <property name="maxActive" value="300" />
        &lt;!&ndash; 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 &ndash;&gt;
        <property name="maxIdle" value="2" />
        &lt;!&ndash; 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 &ndash;&gt;
        <property name="minIdle" value="1" />
    </bean>-->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - oracle 结束 - - - - - - - - - - - - - - - - - - - - - - - - -->

    <!-- 配置SqlSessionFactory工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 1、配置mybatis配置文件位置 （删除原因：被3、4取代） -->
        <!--<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>-->
        <!-- 2、数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 3、类型别名包，默认引入com.zsj.*.*.domain下的所有类 -->
        <property name="typeAliasesPackage" value="com.zsj.*.*.domain"></property>
        <!-- 4、指定sql映射xml文件的路径 -->
        <property name="mapperLocations" value="classpath:com/zsj/*/*/dao/mybatis/*-mybatis.xml"></property>
    </bean>

    <!-- 配置IAccountDao接口所在包-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zsj.*.*.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 事务管理器 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true" />
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="*" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!-- AOP切入  -->
    <aop:config>
        <!-- 切入点  -->
        <!-- 其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数-->
        <aop:pointcut expression="execution(* com.zsj.*.service..*.*(..))" id="zsj"/>
        <!-- 配置切面 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="zsj" />
    </aop:config>

<!--    <bean id="loginInterceptor" class="com.zsj.core.login.controller.LoginController"></bean>-->
<!--    <bean id="interceptorConfig" class="com.zsj.core.login.interceptor.InterceptorConfig">-->
<!--        <constructor-arg ref = "loginInterceptor"></constructor-arg>-->
<!--    </bean>-->

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - redis 开始 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <bean id="annotationPropertyConfigurerRedis"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>
    <!-- 读取properties文件 -->
    <context:property-placeholder location="classpath:redis.properties" />
    <!-- redis数据源 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- IP地址 -->
        <property name="hostName" value="${redis.host}" />
        <!-- 端口号 -->
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <!-- 超时时间 默认2000-->
        <property name="timeout" value="${redis.timeout}" />
        <!-- 连接池配置引用 -->
        <property name="poolConfig" ref="poolConfig" />
        <!-- usePool：是否使用连接池 -->
        <property name="usePool" value="true"/>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - redis 结束 - - - - - - - - - - - - - - - - - - - - - - - - -->
</beans>